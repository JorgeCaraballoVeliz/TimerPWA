import { LitElement, css, html } from 'lit';
import { TimerComponent } from './TimerComponent.js';

export class TimerPlayerComponent extends LitElement {

    static properties = {
        pause: { type: Boolean, attribute: 'pause-btn'},
        play: { type: Boolean, attribute: 'play-btn'},
        reset: { type: Boolean, attribute: 'reset-btn'},
        message: { type: String},
        _status: { type: String, state: true }
    }

    constructor () {
        super();
        this.pause = false;
        this.play = false;
        this.reset = false;
        this.message = 'Ready!';
        this._status = '';
        this.addEventListener('finishTimer', this.FinishTimer);
    }

    static styles = css `
    .timer-player-component__status {
        color: var(--timer-player-component-status-color);
        font-size: var(--timer-player-component-status-font-size);
        text-align: var(--timer-player-component-status-text-align, center);
        margin: var(--timer-player-component-status-margin);
        padding: var(--timer-player-component-status-padding);
    }
    
    .timer-player-component__actions {
        display: flex;
        flex-wrap: var(--timer-player-component-actions-flex-wrap, wrap);
        justify-content: var(--timer-player-component-actions-justify-content, center);
        flex-direction: var(--timer-player-component-actions-flex-direction, row);
        margin: var(--timer-player-component-actions-margin);
    }

    button {
        cursor: pointer;
        padding: var(--timer-player-component-button-padding);
        margin: var(--timer-player-component-button-margin);
        border-radius: var(--timer-player-component-button-border-radius);
    }

    button.timer-player-component__actions--play {
        background-color: var(--timer-player-component-play-background-color);
        color: var(--timer-player-component-play-color);
        border: var(--timer-player-component-play-border);
    }

    button.timer-player-component__actions--pause {
        background-color: var(--timer-player-component-pause-background-color);
        color: var(--timer-player-component-pause-color);
        border: var(--timer-player-component-pause-border);
    }

    button.timer-player-component__actions--reset {
        background-color: var(--timer-player-component-reset-background-color);
        color: var(--timer-player-component-reset-color);
        border: var(--timer-player-component-reset-border);
    }
    `;
    
 connectedCallback() {
        super.connectedCallback();
        this.timer = this.querySelector('timer-component');
    }

    FinishTimer(e) {
        if (!this.enableEvents) e.stopPropagation();
        this._status = this.message;
        console.log(this.message)
        const soundelement = this.querySelector("sound-component");
        console.log(soundelement);
        if (soundelement) {
            soundelement.alarm();

        }
    }

    _handleResetTimer(e) {
        if (!this.enableEvents) e.stopPropagation();
        this._status = '';
    }

    

    render() {
        return html`
        <div class="timer-player-component__status">${this._status}</div>
            <slot></slot>
            <div class="timer-player-component__actions">
                ${this.pause ? html`<button class="timer-player-component__actions--pause" @click="${this.pauseT}">Pause</button>` : ''}
                ${this.play ? html`<button class="timer-player-component__actions--play" @click="${this.playT}">Play</button>` : ''}
                ${this.reset ? html`<button class="timer-player-component__actions--reset" @click="${this.resetT}">Reset</button>` : ''}
            </div>
        `;
    }

    playT() {
        this.timer.startTimer(); //
        this._status = '';
    }

    pauseT() {
        this.timer.pauseTimer();//
    }

    resetT() {
        this.timer.resetTimer();//
        this._status = '';
    }
    
}
customElements.define('timer-player-component', TimerPlayerComponent);